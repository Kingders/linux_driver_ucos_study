//纵观整个初始化,并没有 对 pc31~27 5个adc采样针的gpio设置!!!!



/**
 * \brief Set ADC clock.
 *
 * \param clk adc clock frequency
 *
 * \return ADC clock
 */
uint32_t adc_set_clock(uint32_t adc_clk)
{
	uint32_t prescale, mode_reg;
	uint32_t pck = pmc_get_peripheral_clock(ID_ADC);
	/* Formula for PRESCAL is:
	   ADCClock = PCK / ( (PRESCAL+1) * 2 )
	   PRESCAL = (PCK / (2 * ADCCLK)) - 1
	   First, we do the division, multiplied by 10 to get higher precision
	   If the last digit is not zero, we round up to avoid generating a higher
	   than required frequency. */
	prescale = (pck * 5) / adc_clk;
	if (prescale % 10)
		prescale = prescale / 10;
	else {
		if (prescale == 0)
			return 0;
		prescale = prescale / 10 - 1;
	}

	mode_reg = ADC_MR_PRESCAL(prescale);
	if (mode_reg == 0)
		return 0;

	mode_reg |= (ADC->ADC_MR & ~ADC_MR_PRESCAL_Msk);
	ADC->ADC_MR = mode_reg;

	_adc_clock = pck / (prescale + 1) / 2;

	return _adc_clock;
}



/**
 * \brief Set ADC timing.
 *
 * \param startup startup value
 * \param tracking tracking value
 * \param settling settling value
 */
void adc_set_timing(uint32_t startup, uint32_t tracking, uint32_t settling)
{
	uint32_t mode_reg;

#ifndef CONFIG_HAVE_ADC_SETTLING_TIME
	if (settling) {
		trace_warning("adc: Analog settling time not supported, IGNORED!\r\n");
	}
#endif

	mode_reg = ADC->ADC_MR;
	mode_reg &= (~ADC_MR_STARTUP_Msk) & (~ADC_MR_TRACKTIM_Msk);

#ifdef CONFIG_HAVE_ADC_SETTLING_TIME
	mode_reg &= (~ADC_MR_SETTLING_Msk);
#endif
	/* Formula:
	 *     Startup  Time = startup value / ADCClock
	 *     Transfer Time = (TRANSFER * 2 + 3) / ADCClock
	 *     Tracking Time = (TRACKTIM + 1) / ADCClock
	 *     Settling Time = settling value / ADCClock
	 */
	mode_reg |= ADC_MR_STARTUP(startup);
	mode_reg |= ADC_MR_TRACKTIM(tracking);
	mode_reg |= ADC_MR_TRANSFER(2);
#ifdef CONFIG_HAVE_ADC_SETTLING_TIME
	mode_reg |=  ADC_MR_SETTLING(settling);
#endif
	ADC->ADC_MR |= mode_reg;
}



/**
 * \brief Disables interrupts coming from the given (unique) source (ID_xxx).
 *
 * \param source  Interrupt source to disable.
 */
void aic_disable(uint32_t source)
{
	if (SFR->SFR_AICREDIR) {
		_aic_disable_it(AIC, source);
		return;
	}

	Matrix* matrix = get_peripheral_matrix(source);
	if (!matrix_is_peripheral_secured(matrix, source)) {
		_aic_disable_it(AIC, source);
	} else {
		_aic_disable_it(SAIC, source);
	}
}



/**
 * \brief Disables interrupts coming from the given AIC and (unique) source (ID_xxx).
 *
 * \param aic  AIC instance.
 * \param source  Interrupt source to disable.
 */
static void _aic_disable_it(Aic * aic, uint32_t source)
{
	aic->AIC_SSR = AIC_SSR_INTSEL(source);
	aic->AIC_IDCR = AIC_IDCR_INTD;
}



/**
 * \brief Stop TC Channel
 *
 * Disables the timer clock, stopping the counting.
 *
 * \param pTc     Pointer to a Tc instance.
 * \param channel Channel number.
 */
void tc_stop(Tc * pTc, uint32_t channel)
{
	volatile TcChannel *pTcCh;

	assert(channel <
	       (sizeof (pTc->TC_CHANNEL) / sizeof (pTc->TC_CHANNEL[0])));

	pTcCh = pTc->TC_CHANNEL + channel;
	pTcCh->TC_CCR = TC_CCR_CLKDIS;
	pTcCh->TC_IDR = TC_IER_COVFS;
}



/** \brief Tc hardware registers */
#define TCCHANNEL_NUMBER 3
typedef struct {
	TcChannel TC_CHANNEL[TCCHANNEL_NUMBER];	/**< \brief (Tc Offset: 0x0) channel = 0 .. 2 */
	__O uint32_t TC_BCR;			     /**< \brief (Tc Offset: 0xC0) Block Control Register */
	__IO uint32_t TC_BMR;			     /**< \brief (Tc Offset: 0xC4) Block Mode Register */
	__O uint32_t TC_QIER;			     /**< \brief (Tc Offset: 0xC8) QDEC Interrupt Enable Register */
	__O uint32_t TC_QIDR;			     /**< \brief (Tc Offset: 0xCC) QDEC Interrupt Disable Register */
	__I uint32_t TC_QIMR;			     /**< \brief (Tc Offset: 0xD0) QDEC Interrupt Mask Register */
	__I uint32_t TC_QISR;			     /**< \brief (Tc Offset: 0xD4) QDEC Interrupt Status Register */
	__IO uint32_t TC_FMR;			     /**< \brief (Tc Offset: 0xD8) Fault Mode Register */
	__I uint32_t Reserved1[2];
	__IO uint32_t TC_WPMR;			     /**< \brief (Tc Offset: 0xE4) Write Protection Mode Register */
} Tc;
#endif	



/** \brief Sfr hardware registers */
typedef struct {
	__I uint32_t Reserved0;
	__IO uint32_t SFR_DDRCFG;   /**< \brief (Sfr Offset: 0x04) DDR Configuration Register */
	__I uint32_t Reserved1[2];
	__IO uint32_t SFR_OHCIICR;  /**< \brief (Sfr Offset: 0x10) OHCI Interrupt Configuration Register */
	__I uint32_t SFR_OHCIISR;   /**< \brief (Sfr Offset: 0x14) OHCI Interrupt Status Register */
	__I uint32_t Reserved2[4];
	__IO uint32_t SFR_SECURE;   /**< \brief (Sfr Offset: 0x28) Security Configuration Register */
	__I uint32_t Reserved3[5];
	__IO uint32_t SFR_EBICFG;   /**< \brief (Sfr Offset: 0x40) EBI Configuration Register */
	__I uint32_t Reserved4[2];
	__I uint32_t SFR_SN0;	    /**< \brief (Sfr Offset: 0x4C) Serial Number 0 Register */
	__I uint32_t SFR_SN1;	    /**< \brief (Sfr Offset: 0x50) Seriel Number 1 Register */
	__IO uint32_t SFR_AICREDIR; /**< \brief (Sfr Offset: 0x54) AIC interrupt Redirection Register */
} Sfr;



/** \brief Matrix hardware registers */
#define MATRIXPR_NUMBER 13
typedef struct {
	__IO uint32_t MATRIX_MCFG[10];		  /**< \brief (Matrix Offset: 0x0000) Master Configuration Register */
	__I uint32_t Reserved1[6];
	__IO uint32_t MATRIX_SCFG[13];		  /**< \brief (Matrix Offset: 0x0040) Slave Configuration Register */
	__I uint32_t Reserved2[3];
	MatrixPr MATRIX_PR[MATRIXPR_NUMBER]; /**< \brief (Matrix Offset: 0x0080) 0 .. 12 */
	__I uint32_t Reserved3[26];
	__O uint32_t MATRIX_MEIER;		  /**< \brief (Matrix Offset: 0x0150) Master Error Interrupt Enable Register */
	__O uint32_t MATRIX_MEIDR;		  /**< \brief (Matrix Offset: 0x0154) Master Error Interrupt Disable Register */
	__I uint32_t MATRIX_MEIMR;		  /**< \brief (Matrix Offset: 0x0158) Master Error Interrupt Mask Register */
	__I uint32_t MATRIX_MESR;		  /**< \brief (Matrix Offset: 0x015C) Master Error Status Register */
	__I uint32_t MATRIX_MEAR[10];		  /**< \brief (Matrix Offset: 0x0160) Master 0 Error Address Register */
	__I uint32_t Reserved4[23];
	__IO uint32_t MATRIX_WPMR;		  /**< \brief (Matrix Offset: 0x01E4) Write Protection Mode Register */
	__I uint32_t MATRIX_WPSR;		  /**< \brief (Matrix Offset: 0x01E8) Write Protection Status Register */
	__I uint32_t Reserved5[5];
	__IO uint32_t MATRIX_SSR[13];		  /**< \brief (Matrix Offset: 0x0200) Security Slave 0 Register */
	__I uint32_t Reserved6[3];
	__IO uint32_t MATRIX_SASSR[13];		  /**< \brief (Matrix Offset: 0x0240) Security Areas Split Slave 0 Register */
	__I uint32_t Reserved7[3];
	__IO uint32_t MATRIX_SRTSR[13];		  /**< \brief (Matrix Offset: 0x0284) Security Region Top Slave 1 Register */
	__I uint32_t Reserved8[3];
	__IO uint32_t MATRIX_SPSELR[3];		  /**< \brief (Matrix Offset: 0x02C0) Security Peripheral Select 1 Register */
} Matrix;



/** \brief Aic hardware registers */
typedef struct {
	__IO uint32_t AIC_SSR;	     /**< \brief (Aic Offset: 0x00) Source Select Register */
	__IO uint32_t AIC_SMR;	     /**< \brief (Aic Offset: 0x04) Source Mode Register */
	__IO uint32_t AIC_SVR;	     /**< \brief (Aic Offset: 0x08) Source Vector Register */
	__I uint32_t Reserved1[1];
	__I uint32_t AIC_IVR;	     /**< \brief (Aic Offset: 0x10) Interrupt Vector Register */
	__I uint32_t AIC_FVR;	     /**< \brief (Aic Offset: 0x14) FIQ Vector Register */
	__I uint32_t AIC_ISR;	     /**< \brief (Aic Offset: 0x18) Interrupt Status Register */
	__I uint32_t Reserved2[1];
	__I uint32_t AIC_IPR0;	     /**< \brief (Aic Offset: 0x20) Interrupt Pending Register 0 */
	__I uint32_t AIC_IPR1;	     /**< \brief (Aic Offset: 0x24) Interrupt Pending Register 1 */
	__I uint32_t AIC_IPR2;	     /**< \brief (Aic Offset: 0x28) Interrupt Pending Register 2 */
	__I uint32_t AIC_IPR3;	     /**< \brief (Aic Offset: 0x2C) Interrupt Pending Register 3 */
	__I uint32_t AIC_IMR;	     /**< \brief (Aic Offset: 0x30) Interrupt Mask Register */
	__I uint32_t AIC_CISR;	     /**< \brief (Aic Offset: 0x34) Core Interrupt Status Register */
	__O uint32_t AIC_EOICR;	     /**< \brief (Aic Offset: 0x38) End of Interrupt Command Register */
	__IO uint32_t AIC_SPU;	     /**< \brief (Aic Offset: 0x3C) Spurious Interrupt Vector Register */
	__O uint32_t AIC_IECR;	     /**< \brief (Aic Offset: 0x40) Interrupt Enable Command Register */
	__O uint32_t AIC_IDCR;	     /**< \brief (Aic Offset: 0x44) Interrupt Disable Command Register */
	__O uint32_t AIC_ICCR;	     /**< \brief (Aic Offset: 0x48) Interrupt Clear Command Register */
	__O uint32_t AIC_ISCR;	     /**< \brief (Aic Offset: 0x4C) Interrupt Set Command Register */
	__I uint32_t Reserved3[7];
	__IO uint32_t AIC_DCR;	     /**< \brief (Aic Offset: 0x6C) Debug Control Register */
	__I uint32_t Reserved4[29];
	__IO uint32_t AIC_WPMR;	     /**< \brief (Aic Offset: 0xE4) Write Protection Mode Register */
	__I uint32_t AIC_WPSR;	     /**< \brief (Aic Offset: 0xE8) Write Protection Status Register */
} Aic;



/**
 * \brief (Re)Sart ADC sample.
 * Initialize ADC, set clock and timing, set ADC to given mode.
 */
static void _configure_adc(void)
{
	uint8_t i = 0;

	/* Init channel number and reset value */
	for (i = 0; i < NUM_CHANNELS; i++) {
		_data.channel[i] = adc_channel_used[i];
		_data.value[i] = 0;
	}

	/* Enable/disable sequencer */
	if (_test_mode.sequence_enabled) {
		/* Set user defined channel sequence */
		adc_set_sequence_by_list(adc_channel_used, NUM_CHANNELS);
		/* Enable sequencer */
		adc_set_sequence_mode(true);

	} else {
		adc_set_sequence(0, 0);
		/* Disable sequencer */
		adc_set_sequence_mode(false);
	}

	/* Enable channels, gain, single mode */
	for (i = 0; i < NUM_CHANNELS; i++) {
		adc_enable_channel(_data.channel[i]);
#ifdef CONFIG_HAVE_ADC_INPUT_OFFSET
		adc_disable_channel_differential_input(_data.channel[i]);
#endif
	}

	/* Set power save */
	if (_test_mode.power_save_enabled) {
		adc_set_sleep_mode(true);
	} else {
		adc_set_sleep_mode(false);
	}

	/* Enable Data ready interrupt */
	uint32_t ier_mask = 0;
	for (i = 0; i < NUM_CHANNELS; i++) {
		ier_mask |= 0x1u << _data.channel[i];
	}
	adc_enable_it(ier_mask) ;

	/* Set ADC irq handler */
	aic_set_source_vector(ID_ADC, adc_irq_handler);

	/* Configure trigger mode and start convention */
	switch (_test_mode.trigger_mode) {
		case TRIGGER_MODE_SOFTWARE:
			/* Disable hardware trigger */
			adc_set_trigger(0);
			/* No trigger, only software trigger can start conversions */
			adc_set_trigger_mode(ADC_TRGR_TRGMOD_NO_TRIGGER);
			break;

	    case TRIGGER_MODE_ADTRG:
			pio_configure(pin_adtrg, ARRAY_SIZE(pin_adtrg));
			pio_configure(&pin_trig, 1);
			adc_set_trigger(ADC_MR_TRGSEL_ADC_TRIG0);
			adc_set_trigger_mode(ADC_TRGR_TRGMOD_EXT_TRIG_ANY);
			break;
			
		case TRIGGER_MODE_TIMER :
			/* Trigger timer*/
			/* Configure Timer TC0 */
			_configure_tc_trigger();
			adc_set_trigger(ADC_MR_TRGSEL_ADC_TRIG1);
			adc_set_trigger_mode(ADC_TRGR_TRGMOD_EXT_TRIG_RISE);
			break;

		case TRIGGER_MODE_ADC_TIMER :
			/* Trigger timer*/
			adc_set_trigger_mode(ADC_TRGR_TRGMOD_PERIOD_TRIG);
			adc_set_trigger_period(250);
			break;

	    default :
			break;
	}

	if (_test_mode.dma_enabled) {
		_start_dma();
	} else {
		aic_enable(ID_ADC);
	}
}



/** ADC slected channels */
static uint8_t adc_channel_used[] =
{
	ADC_CHANNEL_3,
	ADC_CHANNEL_4,
	ADC_CHANNEL_0,
	ADC_CHANNEL_1,
	ADC_CHANNEL_2,
};



/**
 * \brief Configure corresponding handler for the interrupts coming from the given (unique) source (ID_xxx).
 *
 * \param source  Interrupt source to configure.
 * \param handler handler for the interrupt.
 */
void aic_set_source_vector(uint32_t source, void (*handler)(void))
{
	Aic *aic = AIC;		//AIC         0xFC06E000
	//SFR->SFR_AICREDIR == 0 表示,启用 secure AIC , == 1表示,启用 no-secure AIC
	if (SFR->SFR_AICREDIR == 0) {					
		Matrix* matrix = get_peripheral_matrix(source);		//  return MATRIX1; // AHB 32-bit matrix
		if (matrix_is_peripheral_secured(matrix, source))
			aic = SAIC;		//SAIC (secure AIC)        0xFC068400
	}
	_aic_set_source_vector(aic, source, handler);
}



Matrix* get_peripheral_matrix(uint32_t id)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(_h64_peripherals); i++)
		if (_h64_peripherals[i] == id)
			return MATRIX0; // AHB 64-bit matrix
	return MATRIX1; // AHB 32-bit matrix
}



uint8_t matrix_is_peripheral_secured(Matrix* mtx, uint32_t periph_id)
{
	if (mtx->MATRIX_SPSELR[periph_id / 32] & (1 << (periph_id % 32))) {
		return 0;	//no-Secured
	} else {
		return 1;	//Secured
	}
}



/**
 * \brief Configure corresponding handler for the interrupts coming from the given (unique) source (ID_xxx).
 *
 * \param aic  AIC instance.
 * \param source  Interrupt source to configure.
 * \param handler handler for the interrupt.
 */
static void _aic_set_source_vector(Aic * aic, uint32_t source, void (*handler)(void))
{
	if (aic->AIC_WPMR & AIC_WPMR_WPEN) {
		aic_write_protection(aic, 1);
	}
	aic->AIC_SSR = AIC_SSR_INTSEL(source);		//AIC_SSR 放中断号
	aic->AIC_SVR = (uint32_t)handler;		//AIC_SVR 当SSR填上中断号A时,SVR直接显示当前号对应的中断处理程序入口AA,可直接修改SVR成另一个函数入口Z
}							//但下次SSR填入A时,SVR自动显示入口Z


/**
 * \brief Interrupt handler for the ADC.
 */
static void adc_irq_handler(void)
{
	uint32_t status;
 	uint8_t i, j;
	uint32_t value;

	/* Get Interrupt Status (ISR) */
	status = adc_get_status();

	/* check at least one EOCn flag set */
	if( status & 0x00000FFF ) {
		for (i=0; i < adc_num_channels(); i++) {
			value = adc_get_converted_data(i);
			/* Check ISR "End of Conversion" corresponding bit */
			if ((status & (1u<<i))) {
				for (j = 0; j < NUM_CHANNELS; j++) {
					if ( _data.channel[j] == i) {
						_data.value[j] = value;
						_data.done |= 1 << i;
						break;
					}
				}
			}
		}
	}
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#define	BOARD_ADC_FREQ (300000)	/** ADC clock */
#define ADC_MR_STARTUP_SUT512 (0x8u << 16) /**< \brief (ADC_MR) 512 periods of ADCCLK */
#define ID_ADC          (44) /**< \brief Touch Screen ADC Controller (ADC) */
#define TC0     ((Tc      *)0xF801C000U) /**< \brief (TC0    ) Base Address */
#define SFR     ((Sfr     *)0xF8028000U) /**< \brief (SFR    ) Base Address */
#define MATRIX0 ((Matrix  *)0xF001C000U) /**< \brief (MATRIX0) Base Address */
#define MATRIX1 ((Matrix  *)0xFC054000U) /**< \brief (MATRIX1) Base Address */
#define adc_start_conversion()         (ADC->ADC_CR = ADC_CR_START)
#define NUM_CHANNELS    ARRAY_SIZE(adc_channel_used)
#define adc_enable_channel(channel)  {			\
		ADC->ADC_CHER = (1 << (channel));	\
	}
#define AIC         0xFC06E000  //SAIC (no secure AIC)  target/sama5d4/toolchain/gnu/cstartup.S:35:
#define SAIC        0xFC068400  //SAIC (secure AIC) target/sama5d4/toolchain/gnu/cstartup.S:36:
#define adc_get_status()               (ADC->ADC_ISR)


/***  初始化  ***/

	/* Set defaut ADC test mode */
	memset((void *)&_test_mode, 0, sizeof(_test_mode));
	_test_mode.trigger_mode = TRIGGER_MODE_SOFTWARE;
	_test_mode.dma_enabled = 0;
	_test_mode.sequence_enabled = 0;

//_initialize_adc()

	/* Enable peripheral clock */
	pmc_enable_peripheral(ID_ADC);

	/*  Reset the controller */
	ADC->ADC_CR = ADC_CR_SWRST;

	/* Reset Mode Register */
	ADC->ADC_MR = 0;

	//adc_set_ts_mode(uint32_t mode = 0)
	ADC->ADC_TSMR = (ADC->ADC_TSMR & ~ADC_TSMR_TSMODE_Msk) | 0;

	/*
	 * Formula: ADCClock = MCK / ((PRESCAL+1) * 2)
	 * For example, MCK = 64MHZ, PRESCAL = 4, then:
	 *     ADCClock = 64 / ((4+1) * 2) = 6.4MHz;
	 */
	/* Set ADC clock */
	adc_set_clock(BOARD_ADC_FREQ);

	/* Formula:
	 *     Startup  Time = startup value / ADCClock
	 *     Transfer Time = (TRANSFER * 2 + 3) / ADCClock
	 *     Tracking Time = (TRACKTIM + 1) / ADCClock
	 *     Settling Time = settling value / ADCClock
	 * For example, ADC clock = 6MHz (166.7 ns)
	 *     Startup time = 512 / 6MHz = 85.3 us
	 *     Transfer Time = (1 * 2 + 3) / 6MHz = 833.3 ns
	 *     Tracking Time = (0 + 1) / 6MHz = 166.7 ns
	 *     Settling Time = 3 / 6MHz = 500 ns
	 */
	/* Set ADC timing */
	adc_set_timing(ADC_MR_STARTUP_SUT512, 0, 0);

	/* Enable channel number tag */
	ADC->ADC_EMR |= ADC_EMR_TAG;		//设置DMA接口寄存器LCDR 显示数据同时显示标记!!


//_set_adc_configuration


	aic_disable(ID_ADC);

	tc_stop(TC0, 0);	//设置定时器而已,用于轮询,软件触发!!

	_configure_adc();

	adc_start_conversion()	//软件触发trigger


/***  中断处理  ***/

//_configure_adc(); 里对中断处理函数初始化!!
	/* Set ADC irq handler */
	aic_set_source_vector(ID_ADC, adc_irq_handler);		//注意对于secure 与 no-secure AIC中断,对应两组不同地址的设置寄存器

//触发执行的中断程序!!!

	adc_irq_handler() //轮询读满CDR0~4 的数据 然后放到 对应的 _data.value[X],并没有其他操作了!!!














